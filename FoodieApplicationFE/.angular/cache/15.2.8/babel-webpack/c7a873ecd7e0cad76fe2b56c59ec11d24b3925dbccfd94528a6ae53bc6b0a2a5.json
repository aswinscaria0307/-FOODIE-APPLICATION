{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FoodieService {\n  constructor(http) {\n    this.http = http;\n    // this.url1= 'http://localhost:8070/api/v1/order/';\n    // this.url2= 'http://localhost:1122/api/v1/payment/';\n    // this.url3= 'http://localhost:7171/api/v1/notification/';\n    this.url1 = 'http://localhost:8081/api/v1/order/';\n    this.url2 = 'http://localhost:8081/api/v1/payment/';\n    this.url3 = 'http://localhost:8081/api/v1/notification/';\n  }\n  getItems(status, email) {\n    const url = `${this.url1}getItems/${status}/${email}`;\n    return this.http.get(url);\n  }\n  insertOrder(order) {\n    let httpHeader = new HttpHeaders({\n      'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n    });\n    let requestOptions = {\n      headers: httpHeader\n    };\n    const url = `${this.url1}insertOrder`;\n    return this.http.post(url, order, requestOptions);\n  }\n  addItem(email, item) {\n    let httpHeader = new HttpHeaders({\n      'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n    });\n    let requestOptions = {\n      headers: httpHeader\n    };\n    const url = `${this.url1}addItem/${email}`;\n    return this.http.post(url, item, requestOptions);\n  }\n  removeItem(email, item) {\n    alert();\n    let httpHeader = new HttpHeaders({\n      'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n    });\n    let requestOptions = {\n      headers: httpHeader\n    };\n    const url = `${this.url1}removeItem/${email}`;\n    return this.http.post(url, item, requestOptions);\n  }\n  createPaymentOrder(data) {\n    console.log(data);\n    const url = `${this.url2}createOrder`;\n    return this.http.post(url, data);\n  }\n  cancelOrder(items, email) {\n    const httpHeader = new HttpHeaders({\n      'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n    });\n    const requestOptions = {\n      headers: httpHeader,\n      body: items\n    };\n    const url = `${this.url1}cancelOrder/${email}`;\n    return this.http.delete(url, requestOptions);\n  }\n  placeOrder(items, email) {\n    const httpHeader = new HttpHeaders({\n      'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n    });\n    const requestOptions = {\n      headers: httpHeader\n    };\n    const url = `${this.url1}placeOrder/${email}`;\n    return this.http.post(url, items, requestOptions);\n  }\n  sendMail(email, subject, body) {\n    const url = `${this.url3}email/${email}`;\n    return this.http.post(url, {\n      subject,\n      body\n    });\n  }\n  sendSms(destinationNumber, message) {\n    const url = `${this.url3}sms`;\n    return this.http.post(url, {\n      message,\n      destinationNumber\n    });\n  }\n}\nFoodieService.ɵfac = function FoodieService_Factory(t) {\n  return new (t || FoodieService)(i0.ɵɵinject(i1.HttpClient));\n};\nFoodieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FoodieService,\n  factory: FoodieService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","FoodieService","constructor","http","url1","url2","url3","getItems","status","email","url","get","insertOrder","order","httpHeader","localStorage","getItem","requestOptions","headers","post","addItem","item","removeItem","alert","createPaymentOrder","data","console","log","cancelOrder","items","body","delete","placeOrder","sendMail","subject","sendSms","destinationNumber","message","factory","providedIn"],"sourceRoot":"","sources":["F:\\CAPSTONE PROJECT- FOODIE APP\\FoodieApplicationFE\\FoodieApplication\\src\\app\\service\\foodie.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Item } from '../model/item';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { PaymentOrder } from '../model/paymentOrder';\nimport { Order } from '../model/order';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FoodieService {\n  private url1:String;\n  private url2:String;\n  private url3:String;\n\n\n  constructor(private http:HttpClient) {\n      // this.url1= 'http://localhost:8070/api/v1/order/';\n      // this.url2= 'http://localhost:1122/api/v1/payment/';\n      // this.url3= 'http://localhost:7171/api/v1/notification/';\n      this.url1= 'http://localhost:8081/api/v1/order/';\n      this.url2= 'http://localhost:8081/api/v1/payment/';\n      this.url3= 'http://localhost:8081/api/v1/notification/';\n      \n   }\n\n   public getItems(status:String,email:String|null):Observable<Item[]>{\n    const url=`${this.url1}getItems/${status}/${email}`;\n    return this.http.get<Item[]>(url);\n   }\n\n   public insertOrder(order:Order):Observable<any>{\n    let httpHeader=new HttpHeaders({\n      'Authorization':'Bearer '+localStorage.getItem('jwt')\n    });\n    let requestOptions={headers:httpHeader}\n    const url=`${this.url1}insertOrder`;\n    return this.http.post<Order>(url,order,requestOptions);\n   }\n\n\n   public addItem(email:String|null,item:Item):Observable<any>{\n    let httpHeader=new HttpHeaders({\n      'Authorization':'Bearer '+localStorage.getItem('jwt')\n    });\n    let requestOptions={headers:httpHeader}\n    const url=`${this.url1}addItem/${email}`;\n    return this.http.post<Item>(url,item,requestOptions);\n   }\n\n   public removeItem(email:String|null,item:Item):Observable<any>{\n    alert()\n    let httpHeader=new HttpHeaders({\n      'Authorization':'Bearer '+localStorage.getItem('jwt')\n    });\n    let requestOptions={headers:httpHeader}\n    const url=`${this.url1}removeItem/${email}`;\n    return this.http.post<Item>(url,item,requestOptions);\n   }\n\n   public createPaymentOrder(data:PaymentOrder){\n    console.log(data);\n    const url=`${this.url2}createOrder`;\n    return this.http.post<PaymentOrder>(url,data);\n   }\n\n   cancelOrder(items: Item[], email: string | null) {\n    const httpHeader = new HttpHeaders({\n      'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n    });\n    const requestOptions = {\n      headers: httpHeader,\n      body: items\n    };\n    const url = `${this.url1}cancelOrder/${email}`;\n    return this.http.delete<Item[]>(url, requestOptions);\n  }\n  placeOrder(items: Item[], email: string | null) {\n    const httpHeader = new HttpHeaders({\n      'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n    });\n    const requestOptions = {headers: httpHeader};    \n    const url = `${this.url1}placeOrder/${email}`;\n    return this.http.post<Item[]>(url,items,requestOptions);\n  }\n  \n  sendMail(email:string|null,subject:string,body:string){\n    const url=`${this.url3}email/${email}`;\n    return this.http.post(url,{subject,body});\n  }\n  sendSms(destinationNumber:string|null,message:string){\n    const url=`${this.url3}sms`;\n    return this.http.post(url,{message,destinationNumber});\n  }\n   \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}