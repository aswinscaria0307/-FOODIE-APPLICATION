{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./foodie.service\";\nexport class LoginService {\n  constructor(foodie) {\n    this.foodie = foodie;\n    this.isLoggedIn = false;\n    this.adminLoggedIn = false;\n    this.userLoggedIn = new EventEmitter();\n    this.adminLogged = new EventEmitter();\n    this.searchElement = new EventEmitter();\n    this.search = new EventEmitter();\n    this.cartCount = new EventEmitter();\n  }\n  loginSuccess() {\n    this.isLoggedIn = true;\n  }\n  onFailure() {\n    this.isLoggedIn = false;\n  }\n  adminLoginSuccess() {\n    this.adminLoggedIn = true;\n  }\n  adminOnFailure() {\n    this.adminLoggedIn = false;\n  }\n  getLoginStatus() {\n    if (this.isLoggedIn) {\n      this.userLoggedIn.emit(this.isLoggedIn);\n    }\n  }\n  admin() {\n    if (this.adminLoggedIn) {\n      this.adminLogged.emit(this.adminLoggedIn);\n    }\n  }\n  findCartCount() {\n    this.foodie.getItems(\"incart\", localStorage.getItem('email')).subscribe(response => {\n      let itemss = response;\n      let count = 0;\n      itemss.map(item => {\n        if (item.count !== undefined) {\n          count += item.count;\n        }\n      });\n      this.cartCount.emit(count);\n    }, error => {\n      this.cartCount.emit(0);\n    });\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.FoodieService));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;;;AAOxD,OAAM,MAAOC,YAAY;EASvBC,YAAoBC,MAAoB;IAApB,WAAM,GAANA,MAAM;IAP1B,eAAU,GAAS,KAAK;IACxB,kBAAa,GAAS,KAAK;IAC3B,iBAAY,GAAuB,IAAIH,YAAY,EAAE;IACrD,gBAAW,GAAuB,IAAIA,YAAY,EAAE;IACpD,kBAAa,GAAsB,IAAIA,YAAY,EAAE;IACrD,WAAM,GAAuB,IAAIA,YAAY,EAAE;IAC/C,cAAS,GAAsB,IAAIA,YAAY,EAAE;EACL;EAE5CI,YAAY;IACV,IAAI,CAACC,UAAU,GAAC,IAAI;EACtB;EACAC,SAAS;IACP,IAAI,CAACD,UAAU,GAAC,KAAK;EACvB;EACAE,iBAAiB;IACf,IAAI,CAACC,aAAa,GAAC,IAAI;EACzB;EACAC,cAAc;IACZ,IAAI,CAACD,aAAa,GAAC,KAAK;EAC1B;EAEAE,cAAc;IACZ,IAAG,IAAI,CAACL,UAAU,EAAC;MACjB,IAAI,CAACM,YAAY,CAACC,IAAI,CAAC,IAAI,CAACP,UAAU,CAAC;;EAE3C;EACAQ,KAAK;IACH,IAAG,IAAI,CAACL,aAAa,EAAC;MACpB,IAAI,CAACM,WAAW,CAACF,IAAI,CAAC,IAAI,CAACJ,aAAa,CAAC;;EAE7C;EACAO,aAAa;IACX,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,QAAQ,EAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAACC,SAAS,CAAEC,QAAe,IAAG;MACxF,IAAIC,MAAM,GAAQD,QAAQ;MAC1B,IAAIE,KAAK,GAAC,CAAC;MACXD,MAAM,CAACE,GAAG,CAACC,IAAI,IAAE;QACf,IAAIA,IAAI,CAACF,KAAK,KAAKG,SAAS,EAAE;UAC5BH,KAAK,IAAIE,IAAI,CAACF,KAAK;;MAEtB,CAAC,CAAC;MACH,IAAI,CAACI,SAAS,CAACd,IAAI,CAACU,KAAK,CAAC;IAC5B,CAAC,EAAEK,KAAK,IAAG;MACT,IAAI,CAACD,SAAS,CAACd,IAAI,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC;EACJ;;AA/CWX,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA2B,SAAZ3B,YAAY;EAAA4B,YAFX;AAAM","names":["EventEmitter","LoginService","constructor","foodie","loginSuccess","isLoggedIn","onFailure","adminLoginSuccess","adminLoggedIn","adminOnFailure","getLoginStatus","userLoggedIn","emit","admin","adminLogged","findCartCount","getItems","localStorage","getItem","subscribe","response","itemss","count","map","item","undefined","cartCount","error","factory","providedIn"],"sourceRoot":"","sources":["F:\\CAPSTONE PROJECT- FOODIE APP\\Dockerized\\FoodieApplicationFE\\FoodieApplication\\src\\app\\service\\login.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\nimport { FoodieService } from './foodie.service';\nimport { Item } from '../model/item';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  isLoggedIn:boolean=false;\n  adminLoggedIn:boolean=false;\n  userLoggedIn:EventEmitter<boolean>=new EventEmitter();\n  adminLogged:EventEmitter<boolean>=new EventEmitter();\n  searchElement:EventEmitter<string>=new EventEmitter();\n  search:EventEmitter<boolean>=new EventEmitter();\n  cartCount:EventEmitter<number>=new EventEmitter();\n  constructor(private foodie:FoodieService) { }\n\n  loginSuccess(){\n    this.isLoggedIn=true;\n  }\n  onFailure(){\n    this.isLoggedIn=false;\n  }\n  adminLoginSuccess(){\n    this.adminLoggedIn=true;\n  }\n  adminOnFailure(){\n    this.adminLoggedIn=false;\n  }\n\n  getLoginStatus(){\n    if(this.isLoggedIn){      \n      this.userLoggedIn.emit(this.isLoggedIn)\n    }\n  }\n  admin(){\n    if(this.adminLoggedIn){      \n      this.adminLogged.emit(this.adminLoggedIn)\n    }\n  }\n  findCartCount(){\n    this.foodie.getItems(\"incart\",localStorage.getItem('email')).subscribe((response:Item[])=>{\n      let itemss:Item[]=response;\n      let count=0;\n      itemss.map(item=>{\n        if (item.count !== undefined) {\n          count += item.count;\n        }\n       })\n      this.cartCount.emit(count);\n    },(error)=>{\n      this.cartCount.emit(0);\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}