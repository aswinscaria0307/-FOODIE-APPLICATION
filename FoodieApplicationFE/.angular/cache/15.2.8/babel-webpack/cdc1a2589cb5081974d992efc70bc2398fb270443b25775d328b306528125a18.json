{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { Order } from '../model/order';\nlet RestaurantViewComponent = class RestaurantViewComponent {\n  constructor(service, route, activatedRoute, login, foodie, _sanckBar) {\n    this.service = service;\n    this.route = route;\n    this.activatedRoute = activatedRoute;\n    this.login = login;\n    this.foodie = foodie;\n    this._sanckBar = _sanckBar;\n    this.searchedItems = [];\n    this.searchedRestaurants = [];\n    this.present = false;\n    this.restaurants = [];\n  }\n  ngOnInit() {\n    this.login.findCartCount();\n    this.service.getAllRestaurant().subscribe(response => {\n      this.restaurants = response;\n    }, error => {\n      alert(\"error!!!!\");\n    });\n    this.login.searchElement.subscribe(seachelement => {\n      this.onSearchTextChanged(seachelement);\n    });\n  }\n  getItems(id) {\n    this.service.getId(id);\n    this.route.navigateByUrl('/viewItem');\n  }\n  getLocation(location) {\n    this.getLocation(location);\n    this.service.getRestaurantByLocation(location).subscribe(response => {\n      const restaurantArray = response;\n      if (location && location !== '') {\n        this.restaurants = restaurantArray.filter(restaurant => restaurant.location === location);\n      } else {\n        this.restaurants = restaurantArray;\n        console.log(restaurantArray);\n      }\n    }, error => {\n      alert(\"error!!!!\");\n    });\n  }\n  onSearchTextChanged(searchText) {\n    this.route.navigateByUrl(\"\");\n    if (searchText && searchText.trim() !== '') {\n      this.present = true;\n      this.searchedItems = [];\n      this.restaurants.forEach(restaurant => {\n        restaurant.items.forEach(item => {\n          if (item.itemName.toLowerCase().includes(searchText.toLowerCase())) {\n            this.searchedItems.push(item);\n          }\n        });\n      });\n    } else {\n      this.ngOnInit();\n      this.present = false;\n      this.searchedItems = [];\n    }\n    if (searchText || searchText !== '') {\n      this.present = true;\n      this.searchedRestaurants = this.restaurants.filter(restaurant => {\n        return restaurant.restaurantName.toLowerCase().includes(searchText.toLowerCase());\n      });\n    } else {\n      this.present = false;\n      this.searchedRestaurants = [];\n      this.ngOnInit();\n    }\n    console.log(this.searchedItems);\n    console.log(this.searchedRestaurants);\n  }\n  addToCart(theItem) {\n    if (this.login.isLoggedIn) {\n      this.addtocart = new Order();\n      this.addtocart.customerId = localStorage.getItem('email') ?? '';\n      this.addtocart.billingAddress = localStorage.getItem(\"address\") ?? '';\n      if (theItem) {\n        console.log(theItem);\n        theItem.status = \"incart\";\n        theItem.count = 1;\n        if (!this.addtocart.items) {\n          this.addtocart.items = [];\n        }\n        this.addtocart.items = this.addtocart.items.concat(theItem);\n        this.foodie.insertOrder(this.addtocart).subscribe(data => {\n          this.login.findCartCount();\n          this._sanckBar.open(`Item Added to Cart`, 'success', {\n            duration: 3000,\n            panelClass: ['mat-toolbar', 'mat-primary']\n          });\n        });\n      } else this.route.navigateByUrl(\"/login\");\n    } else {\n      this.route.navigateByUrl(\"/login\");\n    }\n  }\n};\n__decorate([Input('restaurants')], RestaurantViewComponent.prototype, \"restaurants\", void 0);\nRestaurantViewComponent = __decorate([Component({\n  selector: 'app-restaurant-view',\n  templateUrl: './restaurant-view.component.html',\n  styleUrls: ['./restaurant-view.component.css']\n})], RestaurantViewComponent);\nexport { RestaurantViewComponent };","map":{"version":3,"mappings":"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","names":["Component","Input","Order","RestaurantViewComponent","constructor","service","route","activatedRoute","login","foodie","_sanckBar","ngOnInit","findCartCount","getAllRestaurant","subscribe","response","restaurants","error","alert","searchElement","seachelement","onSearchTextChanged","getItems","id","getId","navigateByUrl","getLocation","location","getRestaurantByLocation","restaurantArray","filter","restaurant","console","log","searchText","trim","present","searchedItems","forEach","items","item","itemName","toLowerCase","includes","push","searchedRestaurants","restaurantName","addToCart","theItem","isLoggedIn","addtocart","customerId","localStorage","getItem","billingAddress","status","count","concat","insertOrder","data","open","duration","panelClass","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["F:\\CAPSTONE PROJECT- FOODIE APP\\FoodieApplicationFE\\FoodieApplication\\src\\app\\restaurant-view\\restaurant-view.component.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { RestaurantServiceService } from '../service/restaurant-service.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LoginService } from '../service/login.service';\nimport { Order } from '../model/order';\nimport { FoodieService } from '../service/foodie.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-restaurant-view',\n  templateUrl: './restaurant-view.component.html',\n  styleUrls: ['./restaurant-view.component.css']\n})\nexport class RestaurantViewComponent {\n  constructor(private service:RestaurantServiceService,private route:Router,private activatedRoute:ActivatedRoute,private login:LoginService,private foodie:FoodieService,private _sanckBar:MatSnackBar){\n  }\n  searchedItems:any=[];\n  searchedRestaurants:any=[];\n  present:boolean=false;\n  addtocart!:Order;\n  ngOnInit(): void {\n    this.login.findCartCount();\n    this.service.getAllRestaurant().subscribe(\n      response=>{\n        this.restaurants=response;\n      },\n      error=>{\n        alert(\"error!!!!\");\n      }\n    )\n    this.login.searchElement.subscribe(seachelement=>{\n      this.onSearchTextChanged(seachelement);\n    })\n  }\n\n  getItems(id:number) {\n    this.service.getId(id);\n    this.route.navigateByUrl('/viewItem');\n    }\n\n    @Input('restaurants') restaurants:any = [];\n\n    getLocation(location:any){\n      this.getLocation(location);\n      this.service.getRestaurantByLocation(location).subscribe(\n        (response: Object) => {\n          const restaurantArray = response as any[];\n          if(location && location !== ''){\n            this.restaurants = restaurantArray.filter((restaurant:any) => restaurant.location === location);\n          } else {\n            this.restaurants = restaurantArray;\n            console.log(restaurantArray);\n            \n          }\n        },\n        error=>{\n          alert(\"error!!!!\");\n        }\n      )\n    }\n\n\n    onSearchTextChanged(searchText:string) {      \n                this.route.navigateByUrl(\"\");\n                if (searchText && searchText.trim() !== '') {\n                  this.present=true;\n                  this.searchedItems = [];\n                  this.restaurants.forEach((restaurant: any) => {\n                    restaurant.items.forEach((item: any) => {\n                      if (item.itemName.toLowerCase().includes(searchText.toLowerCase())) {\n                        this.searchedItems.push(item);\n                      }\n                    });\n                  });\n                } else {\n                  this.ngOnInit()\n                  this.present=false;\n                  this.searchedItems = [];\n                }\n\n                if(searchText || searchText !== ''){\n                  this.present=true;\n                  this.searchedRestaurants=this.restaurants.filter((restaurant:any)=>{\n                      return restaurant.restaurantName.toLowerCase().includes(searchText.toLowerCase());\n                    });\n                }else{\n                  this.present=false;\n                  this.searchedRestaurants=[];\n                  this.ngOnInit();\n                }\n                console.log(this.searchedItems);\n                console.log(this.searchedRestaurants);\n              }\n              addToCart(theItem:any){\n                if(this.login.isLoggedIn){\n                  this.addtocart = new Order();\n                  this.addtocart.customerId = localStorage.getItem('email') ?? '';\n                  this.addtocart.billingAddress=localStorage.getItem(\"address\")?? '';\n                  if (theItem) {\n                    console.log(theItem);\n                    theItem.status=\"incart\";\n                    theItem.count=1;\n                    if (!this.addtocart.items) {\n                      this.addtocart.items = [];\n                    }\n                    this.addtocart.items = this.addtocart.items.concat(theItem);\n                    this.foodie.insertOrder(this.addtocart).subscribe(data=>{\n                      this.login.findCartCount();\n                      this._sanckBar.open(`Item Added to Cart`, 'success', {\n                        duration: 3000,\n                        panelClass: ['mat-toolbar', 'mat-primary']\n                      });\n                    });\n                    }else\n                this.route.navigateByUrl(\"/login\");\n              }  else{this.route.navigateByUrl(\"/login\");}\n              }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}