{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(fb, usee, _sanckBar, route, loginStatus) {\n    this.fb = fb;\n    this.usee = usee;\n    this._sanckBar = _sanckBar;\n    this.route = route;\n    this.loginStatus = loginStatus;\n    this.loginForm = this.fb.group({\n      email: [\"\", [Validators.required, this.checkIfGuestEmailsAreValid]],\n      password: [\"\", [Validators.required, Validators.minLength(7)]]\n    });\n  }\n  get email() {\n    return this.loginForm.get('email');\n  }\n  get password() {\n    return this.loginForm.get('password');\n  }\n  checkIfGuestEmailsAreValid(c) {\n    if (c.value !== '') {\n      const emailString = c.value;\n      const emails = emailString.split(',').map(e => e.trim());\n      const emailRegex = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n      const anyInvalidEmail = emails.every(e => e.match(emailRegex) !== null);\n      if (!anyInvalidEmail) {\n        return {\n          checkIfGuestEmailsAreValid: false\n        };\n      }\n    }\n    return null;\n  }\n  loginCheck() {\n    // console.log(this.loginForm);\n    this.userService.login(this.loginForm.value).subscribe({\n      next: data => {\n        this.responseData = data;\n        // console.log(this.responseData);\n        localStorage.setItem('Token', this.responseData.Token);\n        // localStorage.setItem('email',this.responseData.email);\n        this._sanckBar.open('Logged In successfully.....', 'success', {\n          duration: 3000,\n          panelClass: ['mat-toolbar', 'mat-primary']\n        });\n        this.loginStatus.loginSuccess();\n        this.route.navigateByUrl(\"/header\");\n      },\n      error: err => {\n        this.loginStatus.onFailure();\n        alert(\"Authorization failed, Please check the provided details again!\");\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAkDC,UAAU,QAAQ,gBAAgB;AAW7E,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAIzBC,YAAoBC,EAAc,EAASC,IAAI,EAASC,SAAqB,EAASC,KAAY,EAASC,WAAwB;IAA/G,OAAE,GAAFJ,EAAE;IAAqB,SAAI,GAAJC,IAAI;IAAS,cAAS,GAATC,SAAS;IAAqB,UAAK,GAALC,KAAK;IAAgB,gBAAW,GAAXC,WAAW;IAEtH,cAAS,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MACxBC,KAAK,EAAC,CAAC,EAAE,EAAC,CAACT,UAAU,CAACU,QAAQ,EAAC,IAAI,CAACC,0BAA0B,CAAC,CAAC;MAChEC,QAAQ,EAAC,CAAC,EAAE,EAAC,CAACZ,UAAU,CAACU,QAAQ,EAACV,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,CAAC;KAC3D,CAAC;EALmI;EAOrI,IAAIJ,KAAK;IACP,OAAO,IAAI,CAACK,SAAS,CAACC,GAAG,CAAC,OAAO,CAAC;EACpC;EAEA,IAAIH,QAAQ;IACV,OAAO,IAAI,CAACE,SAAS,CAACC,GAAG,CAAC,UAAU,CAAC;EACvC;EAEAJ,0BAA0B,CAACK,CAAkB;IAE3C,IAAIA,CAAC,CAACC,KAAK,KAAK,EAAE,EAAE;MAClB,MAAMC,WAAW,GAAGF,CAAC,CAACC,KAAK;MAC3B,MAAME,MAAM,GAAGD,WAAW,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,CAAS,IAAKA,CAAC,CAACC,IAAI,EAAE,CAAC;MAClE,MAAMC,UAAU,GAAG,sHAAsH;MACzI,MAAMC,eAAe,GAAGN,MAAM,CAACO,KAAK,CAAEJ,CAAS,IAAKA,CAAC,CAACK,KAAK,CAACH,UAAU,CAAC,KAAK,IAAI,CAAC;MACjF,IAAI,CAACC,eAAe,EAAE;QACpB,OAAO;UAAEd,0BAA0B,EAAE;QAAK,CAAE;;;IAGhD,OAAO,IAAI;EACb;EAEAiB,UAAU;IACR;IAEE,IAAI,CAACC,WAAW,CAACC,KAAK,CAAC,IAAI,CAAChB,SAAS,CAACG,KAAK,CAAC,CAACc,SAAS,CAAC;MACrDC,IAAI,EAACC,IAAI,IAAE;QACT,IAAI,CAACC,YAAY,GAACD,IAAI;QACtB;QAEAE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAC,IAAI,CAACF,YAAY,CAACG,KAAK,CAAC;QACrD;QAGA,IAAI,CAAChC,SAAS,CAACiC,IAAI,CAAC,6BAA6B,EAAE,SAAS,EAAE;UAC5DC,QAAQ,EAAE,IAAI;UACdC,UAAU,EAAE,CAAC,aAAa,EAAE,aAAa;SAC1C,CAAC;QACF,IAAI,CAACjC,WAAW,CAACkC,YAAY,EAAE;QAC/B,IAAI,CAACnC,KAAK,CAACoC,aAAa,CAAC,SAAS,CAAC;MACrC,CAAC;MAACC,KAAK,EAAEC,GAAG,IAAG;QACZ,IAAI,CAACrC,WAAW,CAACsC,SAAS,EAAE;QAC7BC,KAAK,CAAC,gEAAgE,CAAC;MACzE;KACD,CAAC;EACN;CACD;AAzDY7C,cAAc,eAL1BF,SAAS,CAAC;EACTgD,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWhD,cAAc,CAyD1B;SAzDYA,cAAc","names":["Component","Validators","LoginComponent","constructor","fb","usee","_sanckBar","route","loginStatus","group","email","required","checkIfGuestEmailsAreValid","password","minLength","loginForm","get","c","value","emailString","emails","split","map","e","trim","emailRegex","anyInvalidEmail","every","match","loginCheck","userService","login","subscribe","next","data","responseData","localStorage","setItem","Token","open","duration","panelClass","loginSuccess","navigateByUrl","error","err","onFailure","alert","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["F:\\CAPSTONE PROJECT- FOODIE APP\\FoodieApplicationFE\\FoodieApplication\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { UserService } from '../service/user.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { LoginService } from '../service/login.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n\n  responseData:any;\n\n  constructor(private fb:FormBuilder,private usee,private _sanckBar:MatSnackBar,private route:Router,private loginStatus:LoginService){}\n\n  loginForm = this.fb.group({\n    email:[\"\",[Validators.required,this.checkIfGuestEmailsAreValid]],\n    password:[\"\",[Validators.required,Validators.minLength(7)]]\n  })\n\n  get email(){\n    return this.loginForm.get('email');\n  }\n\n  get password(){\n    return this.loginForm.get('password')\n  }\n\n  checkIfGuestEmailsAreValid(c: AbstractControl) {\n \n    if (c.value !== '') {\n      const emailString = c.value;\n      const emails = emailString.split(',').map((e: string) => e.trim());\n      const emailRegex = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n      const anyInvalidEmail = emails.every((e: string) => e.match(emailRegex) !== null);\n      if (!anyInvalidEmail) {\n        return { checkIfGuestEmailsAreValid: false }\n      }\n    }\n    return null;\n  }\n\n  loginCheck(){\n    // console.log(this.loginForm);\n    \n      this.userService.login(this.loginForm.value).subscribe({\n        next:data=>{\n          this.responseData=data;\n          // console.log(this.responseData);\n          \n          localStorage.setItem('Token',this.responseData.Token);\n          // localStorage.setItem('email',this.responseData.email);\n             \n\n          this._sanckBar.open('Logged In successfully.....', 'success', {\n            duration: 3000,\n            panelClass: ['mat-toolbar', 'mat-primary']\n          });\n          this.loginStatus.loginSuccess();\n          this.route.navigateByUrl(\"/header\");\n        },error:(err)=>{\n           this.loginStatus.onFailure()\n          alert(\"Authorization failed, Please check the provided details again!\")\n        }\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}